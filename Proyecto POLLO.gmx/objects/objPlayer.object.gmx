<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerBody</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--- Properties

hp = 4;

hsp = 0;
vsp = 0;

left_input = 0;
right_input = 0;
jump_input = 0;
jump_held_input = 0;
action_input = 0;

run_speed = 12.5;
jump_height = 20;
launch_speed = 80;
jump_precision = 0.5;
grav = 1;
canJump = 1;

bounce = 0.57;
min_bounce_spd = 5;
bounces = 0;
max_bounces = 5;

i = 0;

drawHead = random(100) mod sprite_get_width(sprPlayerHead);
drawBody = random(100) mod sprite_get_width(sprPlayerBody);
drawFeet = random(100) mod sprite_get_width(sprPlayerHead);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate FSM

state_machine_init();

state_create("Stand",scrPlayerStand);
state_create("Jump",scrPlayerJump);
state_create("Run",scrPlayerRun);
state_create("Fall",scrPlayerFall);
state_create("Action",scrPlayerAction);
state_create("Hurt",scrPlayerHurt);
state_create("Die",scrPlayerDie);

state_init("Stand");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--- Weapon

instance_create(x, y, objWeapon)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///state_cleanup();
state_cleanup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///state_update();
state_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///---- Read controls
right_input = keyboard_check(ord("D")); // The right input
left_input = keyboard_check(ord("A")); // The left input
down_input = keyboard_check(ord("S"));
jump_input = keyboard_check_pressed(ord("W")); // The jump input
jump_release_input = keyboard_check(ord("W")); // The jump release input (This is used to allow controlled jump height)
jump_held_input = keyboard_check(ord("W"));

action_input = keyboard_check(ord("Q"));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///state_execute();
state_execute();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///---- Collisions

if !(state_name = "Hurt")
{
    hspd = hsp;
    if (place_meeting(x+hspd,y,objSolid))
    {
        while(!place_meeting(x+sign(hspd),y,objSolid))
        {
            x += sign(hspd);
        }
        hspd = 0;
        hsp = 0;
            
    }
    x += hspd;
    
    
    vspd = vsp;
    if (place_meeting(x,y+vspd,objSolid))
    {
        while(!place_meeting(x,y+sign(vspd),objSolid))
        {
            canJump = 1;
            y += sign(vspd);
        }
        vspd = 0;
        vsp = 0;
        
        
        if place_meeting(x,y+1,objSolid) &amp;&amp; (state_name == "Fall")
        {
            state_switch("Stand");
        }
    }
    else if ( place_meeting(x, y + vspd, objPlatform) &amp;&amp; (vspd &gt; 0)  &amp;&amp; (state_name == "Fall") )
    {
        while(!place_meeting(x,y+sign(vspd),objPlatform))
        {
            canJump = 1;
            y += sign(vspd);
        }
        vspd = 0;
        vsp = 0;
        if place_meeting(x,y+1,objPlatform)
        {
            state_switch("Stand");
        }
    }
    y += vspd;
}
else
{
    // Wall collision
    if (place_meeting(x+hsp,y,objSolid))  //If in our position + what we are about to move forward there is a wall (are we about to collide horizontally?)
    {
        while(!place_meeting(x+sign(hsp),y,objSolid))     //! at the beginning means NOT  //sign returns either 1 or -1
        {
            x += sign(hsp);
        }
        hsp = -(hsp)*bounce;
        bounces += 1;
        audio_play_sound(sndSplat1, 20, false);
            
        // Stop bounce at low values
        if (abs(hsp) &lt; min_bounce_spd)
            state_switch("Stand");
    }
    x += hsp;      
    
    if (place_meeting(x, y+vsp, objSolid)){
        while(!place_meeting(x, y+sign(vsp), objSolid))
        {
            y += sign(vsp)
        }
        vsp = -(vsp)*bounce;
        bounces += 1;
        audio_play_sound(sndSplat1, 20, false);
        
        // Stop bounce at low values
        if (abs(hsp) &lt; min_bounce_spd)
            state_switch("Stand");
        
    }
    y += vsp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--- Flipper

if(hsp != 0)
{
    image_xscale = sign(hsp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fntDefault);
draw_set_color(c_black);
draw_text(40,20,
              "State: "+string(state_name)
              
              +"#hp: "+string(hp)
              //+"#hsp[1]: "+string(hsp[1])
              //+"#hspd: "+string(hspd)
              //+"#vspd: "+string(vspd)
         );
         
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i+=0.25;
var wav1 = sin(i);
var wav2 = cos(i);

if(state_name != "Hurt")
{
    draw_sprite_ext(sprite_index,
                    drawBody,
                    x,
                    y + wav1,
                    image_xscale,
                    image_yscale,
                    image_angle,
                    c_white,
                    image_alpha);
                    
    draw_sprite_ext(sprFeet,
                    drawFeet,
                    x,
                    y,
                    image_xscale,
                    image_yscale,
                    image_angle,
                    c_white,
                    image_alpha);
    
    draw_sprite_ext(sprPlayerHead,
                    drawHead,
                    x,
                    y + wav2,
                    image_xscale,
                    image_yscale,
                    image_angle,
                    c_white,
                    image_alpha);
}
else
{
    var tDir = point_direction(xprevious, yprevious, x, y);
    draw_sprite_ext(sprite_index,
                drawBody,
                x,
                y + wav1,
                image_xscale,
                image_yscale,
                tDir,
                c_white,
                image_alpha);
                
    draw_sprite_ext(sprFeet,
                drawFeet,
                x,
                y,
                image_xscale,
                image_yscale,
                tDir,
                c_white,
                image_alpha);

    draw_sprite_ext(sprPlayerHead,
                drawHead,
                x,
                y + wav2,
                image_xscale,
                image_yscale,
                tDir,
                c_white,
                image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="85">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state_switch("Hurt");
shake(10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
