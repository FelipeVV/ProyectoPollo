<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i = 0;
rumble_wav = 0; //rumble wave for x drawing
rot = 0;
dir = global.g_dir;
spd = 42;
image_speed = 3;

Ystretch_wav = 0;
Xstretch_wav = 0;

hspd = lengthdir_x(spd, dir);
vspd = lengthdir_y(spd, dir);

bounce = 1;
min_bounce_spd = 5;
bounces = 0;
max_bounces = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
i += 1; //muchas funciones dependen de i. i tiene que avanzar 1 por step.

// Wall collision
if (place_meeting(x+hspd,y,objSolid))  //If in our position + what we are about to move forward there is a wall (are we about to collide horizontally?)
{
    while(!place_meeting(x+sign(hspd),y,objSolid))     //! at the beginning means NOT  //sign returns either 1 or -1
    {
        x += sign(hspd);
    }
    hspd = -(hspd)*bounce;
    bounces += 1;
        
    // Stop bounce at low values
    if (abs(hspd) &lt; min_bounce_spd) hspd = 0;
}
x += hspd;      

if (place_meeting(x, y+vspd, objSolid)){
    while(!place_meeting(x, y+sign(vspd), objSolid))
    {
        y += sign(vspd)
    }
    vspd = -(vspd)*bounce;
    bounces += 1;
}
y += vspd;

rumble_wav = 2 * sin(i);
Ystretch_wav = 1//0.025*sin(i)+0.975;
Xstretch_wav = 1//0.25*sin(i+3.2)+0.75;



if (x&gt;room_width)||(y&gt;room_height)||(bounces &gt; max_bounces){
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index = sprBullet)
{
    sprite_index = sprBulletHit;
}

if (sprite_index = sprBulletHit)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = point_direction(xprevious, yprevious, x, y);

draw_sprite_ext(sprite_index, 
                image_index, 
                x+(rumble_wav), 
                y+(rumble_wav), 
                image_xscale*(Xstretch_wav), 
                image_yscale*(Ystretch_wav), 
                dir, 
                c_white, 
                image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
